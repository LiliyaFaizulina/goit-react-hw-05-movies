{"version":3,"file":"static/js/473.65f97bee.chunk.js","mappings":"wOAIaA,EAAoB,WAAoB,IAAnBC,EAAkB,uDAAP,GAC3C,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAeC,EAAAA,EAAAA,MAAPC,EAAR,EAAQA,GAkBR,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMC,GAAN,8EACfP,GAAa,GADE,mBAGcQ,EAAAA,EAAAA,IAAeD,EAASZ,GAHtC,OAGPc,EAHO,OAIbX,EAAaW,GAJA,gDAMbP,EAAS,KAAMQ,SANF,yBAQbV,GAAa,GARA,4EAAH,sDAYdM,EAASF,EACV,GAAE,CAACA,EAAIT,IAED,CAAEE,UAAAA,EAAWE,UAAAA,EAAWE,MAAAA,EAChC,C,4HCzBYU,EAAYC,EAAAA,GAAAA,GAAH,4EAMTC,EAAWD,EAAAA,GAAAA,GAAH,4JAML,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAZ,IAIJC,EAAUL,EAAAA,GAAAA,IAAH,kGAOPM,EAASN,EAAAA,GAAAA,IAAH,+E,SCrBNO,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,SAAC,IAAD,UACGA,EAAKC,KAAKC,OAAS,GAClB,SAACX,EAAD,UACGS,EAAKC,KAAKE,KAAI,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACb,UAACb,EAAD,YACE,SAACI,EAAD,WACE,SAACC,EAAD,CACES,IACEF,EAAY,0CAC2BA,GACnC,uCAENG,IAAKJ,OAGT,4BACE,uBAAIA,KACJ,uCAAeE,UAbJtB,EADF,OAoBjB,oDAIP,ECnBD,EAXiB,WACf,OAAwCV,EAAAA,EAAAA,GAAkB,YAAlDG,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,MAC9B,OACE,gCACGF,IAAa,SAAC8B,EAAA,EAAD,IACb5B,IAAS,mDACTJ,IAAa,SAACsB,EAAD,CAAUC,KAAMvB,MAGnC,C","sources":["hooks/useFetchMovieInfo.js","components/CastList/CastList.styled.jsx","components/CastList/CastList.jsx","pages/CastPage/CastPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport const useFetchMovieInfo = (endpoint = '') => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieById(movieId, endpoint);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(id);\n  }, [id, endpoint]);\n\n  return { movieInfo, isLoading, error };\n};\n","import styled from 'styled-components';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 40px) / 5);\n  display: flex;\n  align-items: center;\n\n  gap: 5px;\n  box-shadow: ${p => p.theme.shadow};\n  font-size: 12px;\n`;\n\nexport const Wrapper = styled.div`\n  flex-shrink: 0;\n  width: 80px;\n  height: 100px;\n  overflow: hidden;\n`;\n\nexport const Avatar = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n","import PropTypes from 'prop-types';\nimport { MainContainer } from 'utils/GlobalStyle';\nimport { ActorList, CastItem, Wrapper, Avatar } from './CastList.styled';\n\nexport const CastList = ({ info }) => {\n  return (\n    <MainContainer>\n      {info.cast.length > 0 ? (\n        <ActorList>\n          {info.cast.map(({ id, name, profile_path, character }) => (\n            <CastItem key={id}>\n              <Wrapper>\n                <Avatar\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : 'https://i.ibb.co/bPtNcLX/NoImage.png'\n                  }\n                  alt={name}\n                />\n              </Wrapper>\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </CastItem>\n          ))}\n        </ActorList>\n      ) : (\n        <p>We have no more details</p>\n      )}\n    </MainContainer>\n  );\n};\n\nCastList.propTypes = {\n  info: PropTypes.shape({\n    cast: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { CastList } from 'components/CastList/CastList';\nconst CastPage = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo('/credits');\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We have no more details</p>}\n      {movieInfo && <CastList info={movieInfo} />}\n    </>\n  );\n};\n\nexport default CastPage;\n"],"names":["useFetchMovieInfo","endpoint","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","id","useEffect","getMovie","movieId","fetchMovieById","movieDetails","message","ActorList","styled","CastItem","p","theme","shadow","Wrapper","Avatar","CastList","info","cast","length","map","name","profile_path","character","src","alt","Loader"],"sourceRoot":""}