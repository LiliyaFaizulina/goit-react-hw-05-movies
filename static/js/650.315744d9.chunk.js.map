{"version":3,"file":"static/js/650.315744d9.chunk.js","mappings":"wOAIaA,EAAoB,WAAoB,IAAnBC,EAAkB,uDAAP,GAC3C,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAeC,EAAAA,EAAAA,MAAPC,EAAR,EAAQA,GAkBR,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMC,GAAN,wFACYC,EAAAA,EAAAA,IAAeD,EAASZ,GADpC,OACTc,EADS,OAEfX,EAAaW,GAFE,2CAAH,sDAKdT,GAAa,GACb,IACEM,EAASF,EAKV,CAJC,MAAOH,GACPC,EAASD,EAAMS,QAChB,CAJD,QAKEV,GAAa,EACd,CACF,GAAE,CAACI,EAAIT,IAED,CAAEE,UAAAA,EAAWE,UAAAA,EAAWE,MAAAA,EAChC,C,yFC3BYU,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3B,OACE,wBACGA,EAAKC,QAAQC,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,OAAwBC,GAA/B,EAAeC,eAAf,EAA+BD,SAA/B,OAChB,2BACE,qCAAaD,MACb,uCAAeC,OAFRZ,EADO,KAQvB,E,SCGD,EAXoB,WAClB,OAAwCV,EAAAA,EAAAA,GAAkB,YAAlDG,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,MAC9B,OACE,gCACGF,IAAa,SAACmB,EAAA,EAAD,IACbjB,IAAS,oEACTJ,IAAa,SAACc,EAAD,CAAYC,KAAMf,MAGrC,C","sources":["hooks/useFetchMovieInfo.js","components/ReviewList/ReviewList.jsx","pages/ReviewsPage/ReviewsPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport const useFetchMovieInfo = (endpoint = '') => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      const movieDetails = await fetchMovieById(movieId, endpoint);\n      setMovieInfo(movieDetails);\n    };\n\n    setIsLoading(true);\n    try {\n      getMovie(id);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id, endpoint]);\n\n  return { movieInfo, isLoading, error };\n};\n","export const ReviewList = ({ info }) => {\n  return (\n    <ul>\n      {info.results.map(({ id, author, author_details, content }) => (\n        <li key={id}>\n          <h4>Author: {author}</h4>\n          <p>Character: {content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { ReviewList } from 'components/ReviewList/ReviewList';\nimport { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nconst ReviewsPage = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo('/reviews');\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We don't have any reviews for this movie</p>}\n      {movieInfo && <ReviewList info={movieInfo} />}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["useFetchMovieInfo","endpoint","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","id","useEffect","getMovie","movieId","fetchMovieById","movieDetails","message","ReviewList","info","results","map","author","content","author_details","Loader"],"sourceRoot":""}